@startuml
title Тёплый дом — Диаграмма компонентов

!includeurl https://raw.githubusercontent.com/RicardoNiepel/C4-PlantUML/master/C4_Component.puml

Person(User, "Пользователь", "Конечный пользователь, управляющий умным домом через мобильные и веб-приложения")
Person(Admin, "Администратор", "Администратор, управляющий системой и обеспечивающий поддержку пользователей")

Container(App, "Мобильное приложение", "iOS/Android", "Позволяет пользователям управлять устройствами в доме, включая освещение и отопление")
Container(WebUser, "Веб приложение для пользователей", "React", "Позволяет пользователям управлять устройствами через веб-интерфейс")
Container(WebAdmin, "Веб приложение для администрации", "React", "Позволяет администраторам системное управление и аналитический надзор")
Container(AnalyticsService, "Сервис аналитики", "Python", "Собирает и анализирует данные взаимодействий для представления инсайтов администраторам")
Container(PaymentService, "Платежный сервис", "Java", "Управляет обработкой платежей через систему и интеграцию с банком")
Container(ServiceHub, "Хаб устройств", "C++", "Взаимодействует с подключенными устройствами и распределяет команды")

System_Ext(paymentGateway, "Внешний платежный сервис (Банк)", "Обработка транзакций для обеспечения безопасности платежей")

Boundary(BoundaryApiGateway, "Сервис: API Gatewa", "Java/Spring") {
  Component(ApiGateway, "API Gateway", "Java/Spring", "Проксирует запросы ко внутренним микросервисам и управляет маршрутизацией, распределяем нагрузку")
}

Boundary(supportService, "Сервис: Техническая поддержка", "Обрабатывает запросы пользователей на поддержку и решает технические проблемы") {
  Component(supportServiceOpen, "Открыть заявку", "", "Пользователь создает заявку со своей проблемой")
  Component(supportServiceUpdate, "Изменить заявку", "", "Сотрудник поддержки работает над заявкой, добавление комментарием, изменение статуса, перевод заявку на другого сотрудника и тд.")
  Component(supportServiceClose , "Закрыть заявку", "", "Проблема решена, заявка закрыта")

  Rel(supportServiceOpen, supportServiceUpdate, "Перевод статус заявки 'В работе'")
  Rel(supportServiceUpdate, supportServiceClose, "Перевод статус заявки 'Закрыто'")

  Rel(App, supportServiceOpen, "Создание заявки на поддержку и помощь")
  Rel(WebUser, supportServiceOpen, "Создание заявки на поддержку и помощь")
  Rel(WebAdmin, supportServiceUpdate, "Работа над заявкой")
  Rel(WebAdmin, supportServiceClose, "Закрытие заявки")
}

Boundary(BoundaryAuthService, "Микросервис: Аутентификация пользовател", "Java/Spring") {
 Component(authService, "Аутентификация пользователя", "", "Управление аутентификацией и авторизацией пользователей")
 ContainerDb(authDb, "База данных", "PostgreSQL", "Хранит данные об учетных записях и правах доступа")
}

Boundary(BoundaryAccountService, "Микросервис: Аккаунт пользователя", "Java/Spring") {
 Component(accountService, "Аккаунт пользователя", "", "Управление профилями и учетными записями пользователей")
 ContainerDb(accountDb, "База данных", "PostgreSQL", "Обрабатывает информацию о пользователях и их профилях")
}

Boundary(BoundaryHomeRoomService, "Микросервис: Дома/комнаты", "Java/Spring") {
 Component(homeRoomService, "Дома/комнаты", "", "Управление данными о домах и комнатах пользователей")
 ContainerDb(homeRoomDb, "База данных", "PostgreSQL", "Хранит конфигурации и состояние комнат")
}

Boundary(BoundaryDeviceService, "Микросервис: Устройства", "Java/Spring") {
 Component(DeviceService, "Устройства", "", "Обеспечивает взаимодействие и интеграцию со всеми умными устройствами")
 ContainerDb(deviceDb, "База данных", "PostgreSQL", "Содержит информацию об установленных устройствам")
}

Boundary(BoundaryScenarioService, "Микросервис: Сценари", "Java/Spring") {
 Component(scenarioService, "Сценари", "", "Позволяет пользователям настраивать автоматизированные сценарии")
 ContainerDb(scenarioDb, "База данных", "PostgreSQL", "Обеспечивает данные для автоматизации сценариев")
}

Boundary(BoundaryMonitoringService, "Микросервис: Мониторинг", "Java/Spring") {
 Component(monitoringService, "Мониторинг", "", "Обеспечивает сбор и анализ данных с устройств")
 ContainerDb(monitoringDb, "База данных", "PostgreSQL", "Сохраняет данные о производительности и использовании")
}

Boundary(BoundaryDevices, "Устройства", "Различные умные устройства в доме, поддерживающие удаленное управление") {
 Container(HeatingDevice, "Отопление", "Устройство")
 Container(LightBulbDevices, "Лампочка", "Устройство")

 Container(DevicesActionGet, "Получает информацию", "Действие")
 Container(DevicesActionUpdateHeating, "Изменяет настройки отопления", "Действие")
 Container(DevicesActionUpdateLightBulb, "Изменяет цвет лампочки", "Действие")
 Container(DevicesActionOnOff, "Включает/выключает", "Действие")

 Rel(DevicesActionGet, HeatingDevice, "Взаимодействие с девайсом")
 Rel(DevicesActionUpdateHeating, HeatingDevice, "Взаимодействие с девайсом")
 Rel(DevicesActionOnOff, HeatingDevice, "Взаимодействие с девайсом")

 Rel(DevicesActionGet, LightBulbDevices, "Взаимодействие с девайсом")
 Rel(DevicesActionUpdateLightBulb, LightBulbDevices, "Взаимодействие с девайсом")
 Rel(DevicesActionOnOff, LightBulbDevices, "Взаимодействие с девайсом")
}


Component(BusinessLogic, "Бизнес логика", "Java", "Содержит основные бизнес-правила и логику интеграций")
ContainerDb(RedisCache, "Redis Кэш", "In-memory database", "Обеспечивает быстрый доступ к часто запрашиваемым данным")
ContainerQueue(KafkaQueue, "Kafka", "Message Queue", "Обеспечивает асинхронную обработку событий между микросервисами")







Rel(User, App, "Использует приложение для управления")
Rel(User, WebUser, "Использует веб для управления")
Rel(Admin, WebAdmin, "Использует административное приложение")


Rel(WebAdmin, AnalyticsService, "Получает аналитическую информацию")

Rel(PaymentService, paymentGateway, "Производит платежные операции")
Rel(ServiceHub, BoundaryDevices, "Отправляет команды и получает данные")

Rel(App, ApiGateway, "API вызовы")
Rel(WebUser, ApiGateway, "API вызовы")
Rel(WebAdmin, ApiGateway, "API вызовы")

Rel(ApiGateway, BoundaryAuthService, "Направляет запросы на аутентификацию")
Rel(ApiGateway, BoundaryAccountService, "Направляет запросы к пользователям")
Rel(ApiGateway, BoundaryHomeRoomService, "Обрабатывает информацию по домам")
Rel(ApiGateway, BoundaryDeviceService, "Распределяет команды между устройствами")
Rel(ApiGateway, BoundaryScenarioService, "Передает рабочие сценарии")
Rel(ApiGateway, BoundaryMonitoringService, "Направляет запросы мониторинга")

Rel(authService, authDb, "Читает и пишет данные аутентификации")
Rel(accountService, accountDb, "Читает и пишет данные пользователей")
Rel(homeRoomService, homeRoomDb, "Обрабатывает данные помещений")
Rel(DeviceService, deviceDb, "Читает и пишет данные устройств")
Rel(scenarioService, scenarioDb, "Управляет данными сценариев")
Rel(monitoringService, monitoringDb, "Читает данные мониторинга")

Rel(BoundaryAuthService, BusinessLogic, "Взаимодействует для правил доступа")
Rel(BoundaryAccountService, BusinessLogic, "Взаимодействует для обслуживания профилей")
Rel(BoundaryHomeRoomService, BusinessLogic, "Обрабатывает события и правила для комнат")
Rel(BoundaryDeviceService, BusinessLogic, "Реализует логику взаимодействия устройств")
Rel(BoundaryScenarioService, BusinessLogic, "Передает для выполнения сценариев")
Rel(BoundaryMonitoringService, BusinessLogic, "Интеграция мониторинга")

Rel(BusinessLogic, KafkaQueue, "Обработка событий и обмен данными")
Rel(KafkaQueue, BusinessLogic, "Получение событий и обмен данными")

Rel(BusinessLogic, RedisCache, "Кэширование данных")
Rel(RedisCache, BusinessLogic, "Обращение к кэшу")

Rel(BusinessLogic, ServiceHub, "Интеграция с устройствами")
Rel(BusinessLogic, PaymentService, "Интеграция с платежами")

Rel(AnalyticsService, ApiGateway, "Получает данные для анализа")

@enduml